extends layout

block content
  h1= title
  h3 hey com 
  p Welcome to #{title}
  canvas#memoryHistory(width="600", height='300')
  canvas#memoryPercent(width='300' height='300')
  script(type="text/javascript").
    function formatTime(n) {
      var h, m, s = n;
      if (s < 60) {
        return s;
      } else if (s < 3600) {
        m = ~~(s / 60);
        s = n - m * 60;
        return m + ':' + s;
      } else {
        h = ~~(s / 3600);
        m = ~~((s - h * 3600)/ 60);
        s = s - h * 3600 - m * 60;
        return h + ':' + m + ':' + s;
      }
    }
    
    var data = {
      labels: ["1"],
      datasets: [
        {
          label: 'Full memory',
          fillColor: "rgba(220,190,170,0.2)",
          strokeColor: "rgba(220,190,170,1)",
          pointColor: "rgba(220,220,220,1)",
          pointStrokeColor: "#fff",
          pointHighlightFill: "#fff",
          pointHighlightStroke: "rgba(220,220,220,1)"
        },
        {
          label: 'Idle Memory',
          fillColor: "rgba(200,220,190,0.2)",
          strokeColor: "rgba(200,220,190,1)",
          pointColor: "rgba(220,220,220,1)",
          pointStrokeColor: "#fff",
          pointHighlightFill: "#fff",
          pointHighlightStroke: "rgba(220,220,220,1)"
        }
      ]
    };
    
    var ctx = document.getElementById('memoryHistory').getContext('2d');
    var memoryHistory = new Chart(ctx).Line(data, {bezierCurve: false});
    
    ctx = document.getElementById('memoryPercent').getContext('2d');
    var memoryPercent = new Chart(ctx).Pie();
    
    function createArray(size) {
      var array = [];
      for(var i =0; i <size; i++) {
        array.push(Math.random() * 200);
      }
      return array;
    }
    
    var raf = (function() {
      var raf = function(cb) {
        setTimeout(cb, 26);
      }
      if (window.requestAnimationFrame) {
          raf = window.requestAnimationFrame;
      } else if (window.webkitRequestAnimationFrame) {
        raf = window.webkitRequestAnimationFrame;
      } else if (window.mozRequestAnimationFrame) {
        raf = window.mozRequestAnimationFrame;
      }
      
      return raf;
    })();
    
    // store all the memory ids
    var memorySections = [];
    var socket = io.connect('http://localhost:3000');
    
    socket.on('beat', function(data) {
      console.log('heart beat');
      // update line chart
      if (memoryHistory.datasets[0].points.length > 30) {
        memoryHistory.removeData();
      }
      memoryHistory.addData([data.memory.busySize, data.memory.idleSize],
        formatTime(data.seconds));
      memoryHistory.update();
      
      // update pie chart
      data.memory.sections.forEach(function(val, index) {
        var n = 0;
        if ((n = memorySections.indexOf(val.id)) !== -1) {
          console.log(n);
          for(var i = index; i < n; i ++) {
            memoryPercent.removeData(i);
          }
          
          memoryPercent.segments[0].value = val.size;
        } else {
          memoryPercent.addData({
            value: val.size,
            color: '#aaefef',
            highlight: '#eee',
            label: val.id
          }, index);
        }
      });
      memorySections = data.memory.sections.map((val)=>{
        return val.id;
      });
      
      memoryPercent.update();
    });
